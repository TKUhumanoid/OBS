// Generated by gencpp from file strategy/GetParameter.msg
// DO NOT EDIT!


#ifndef STRATEGY_MESSAGE_GETPARAMETER_H
#define STRATEGY_MESSAGE_GETPARAMETER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace strategy
{
template <class ContainerAllocator>
struct GetParameter_
{
  typedef GetParameter_<ContainerAllocator> Type;

  GetParameter_()
    : Dy(0)
    , Dx(0.0)
    , RD(0)
    , LD(0)
    , WR(0)
    , WL(0)
    , slope_avg(0.0)
    , LeftblueOBS_XMax(0)
    , RightblueOBS_XMin(0)
    , in_reddoor_flag(false)
    , L_XMAX(0)
    , R_XMIN(0)
    , b_obs_flag(false)
    , y_obs_flag(false)
    , l_center_Dy(0)
    , r_center_Dy(0)
    , center_Dy(0)
    , one_b_flag(false)
    , two_b_flag(false)
    , Deep_sum(0)  {
    }
  GetParameter_(const ContainerAllocator& _alloc)
    : Dy(0)
    , Dx(0.0)
    , RD(0)
    , LD(0)
    , WR(0)
    , WL(0)
    , slope_avg(0.0)
    , LeftblueOBS_XMax(0)
    , RightblueOBS_XMin(0)
    , in_reddoor_flag(false)
    , L_XMAX(0)
    , R_XMIN(0)
    , b_obs_flag(false)
    , y_obs_flag(false)
    , l_center_Dy(0)
    , r_center_Dy(0)
    , center_Dy(0)
    , one_b_flag(false)
    , two_b_flag(false)
    , Deep_sum(0)  {
  (void)_alloc;
    }



   typedef int32_t _Dy_type;
  _Dy_type Dy;

   typedef float _Dx_type;
  _Dx_type Dx;

   typedef int32_t _RD_type;
  _RD_type RD;

   typedef int32_t _LD_type;
  _LD_type LD;

   typedef int32_t _WR_type;
  _WR_type WR;

   typedef int32_t _WL_type;
  _WL_type WL;

   typedef float _slope_avg_type;
  _slope_avg_type slope_avg;

   typedef int32_t _LeftblueOBS_XMax_type;
  _LeftblueOBS_XMax_type LeftblueOBS_XMax;

   typedef int32_t _RightblueOBS_XMin_type;
  _RightblueOBS_XMin_type RightblueOBS_XMin;

   typedef uint8_t _in_reddoor_flag_type;
  _in_reddoor_flag_type in_reddoor_flag;

   typedef int32_t _L_XMAX_type;
  _L_XMAX_type L_XMAX;

   typedef int32_t _R_XMIN_type;
  _R_XMIN_type R_XMIN;

   typedef uint8_t _b_obs_flag_type;
  _b_obs_flag_type b_obs_flag;

   typedef uint8_t _y_obs_flag_type;
  _y_obs_flag_type y_obs_flag;

   typedef int32_t _l_center_Dy_type;
  _l_center_Dy_type l_center_Dy;

   typedef int32_t _r_center_Dy_type;
  _r_center_Dy_type r_center_Dy;

   typedef int32_t _center_Dy_type;
  _center_Dy_type center_Dy;

   typedef uint8_t _one_b_flag_type;
  _one_b_flag_type one_b_flag;

   typedef uint8_t _two_b_flag_type;
  _two_b_flag_type two_b_flag;

   typedef int32_t _Deep_sum_type;
  _Deep_sum_type Deep_sum;





  typedef boost::shared_ptr< ::strategy::GetParameter_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::strategy::GetParameter_<ContainerAllocator> const> ConstPtr;

}; // struct GetParameter_

typedef ::strategy::GetParameter_<std::allocator<void> > GetParameter;

typedef boost::shared_ptr< ::strategy::GetParameter > GetParameterPtr;
typedef boost::shared_ptr< ::strategy::GetParameter const> GetParameterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::strategy::GetParameter_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::strategy::GetParameter_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::strategy::GetParameter_<ContainerAllocator1> & lhs, const ::strategy::GetParameter_<ContainerAllocator2> & rhs)
{
  return lhs.Dy == rhs.Dy &&
    lhs.Dx == rhs.Dx &&
    lhs.RD == rhs.RD &&
    lhs.LD == rhs.LD &&
    lhs.WR == rhs.WR &&
    lhs.WL == rhs.WL &&
    lhs.slope_avg == rhs.slope_avg &&
    lhs.LeftblueOBS_XMax == rhs.LeftblueOBS_XMax &&
    lhs.RightblueOBS_XMin == rhs.RightblueOBS_XMin &&
    lhs.in_reddoor_flag == rhs.in_reddoor_flag &&
    lhs.L_XMAX == rhs.L_XMAX &&
    lhs.R_XMIN == rhs.R_XMIN &&
    lhs.b_obs_flag == rhs.b_obs_flag &&
    lhs.y_obs_flag == rhs.y_obs_flag &&
    lhs.l_center_Dy == rhs.l_center_Dy &&
    lhs.r_center_Dy == rhs.r_center_Dy &&
    lhs.center_Dy == rhs.center_Dy &&
    lhs.one_b_flag == rhs.one_b_flag &&
    lhs.two_b_flag == rhs.two_b_flag &&
    lhs.Deep_sum == rhs.Deep_sum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::strategy::GetParameter_<ContainerAllocator1> & lhs, const ::strategy::GetParameter_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace strategy

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::strategy::GetParameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::strategy::GetParameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::strategy::GetParameter_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::strategy::GetParameter_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy::GetParameter_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::strategy::GetParameter_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::strategy::GetParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9759c82a913d9fb9e363417e06932b7a";
  }

  static const char* value(const ::strategy::GetParameter_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9759c82a913d9fb9ULL;
  static const uint64_t static_value2 = 0xe363417e06932b7aULL;
};

template<class ContainerAllocator>
struct DataType< ::strategy::GetParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "strategy/GetParameter";
  }

  static const char* value(const ::strategy::GetParameter_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::strategy::GetParameter_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 Dy\n"
"float32 Dx\n"
"int32 RD\n"
"int32 LD\n"
"int32 WR\n"
"int32 WL\n"
"float32 slope_avg\n"
"int32 LeftblueOBS_XMax\n"
"int32 RightblueOBS_XMin\n"
"bool in_reddoor_flag\n"
"int32 L_XMAX\n"
"int32 R_XMIN\n"
"bool b_obs_flag\n"
"bool y_obs_flag\n"
"int32 l_center_Dy\n"
"int32 r_center_Dy\n"
"int32 center_Dy\n"
"bool one_b_flag\n"
"bool two_b_flag\n"
"int32 Deep_sum\n"
;
  }

  static const char* value(const ::strategy::GetParameter_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::strategy::GetParameter_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Dy);
      stream.next(m.Dx);
      stream.next(m.RD);
      stream.next(m.LD);
      stream.next(m.WR);
      stream.next(m.WL);
      stream.next(m.slope_avg);
      stream.next(m.LeftblueOBS_XMax);
      stream.next(m.RightblueOBS_XMin);
      stream.next(m.in_reddoor_flag);
      stream.next(m.L_XMAX);
      stream.next(m.R_XMIN);
      stream.next(m.b_obs_flag);
      stream.next(m.y_obs_flag);
      stream.next(m.l_center_Dy);
      stream.next(m.r_center_Dy);
      stream.next(m.center_Dy);
      stream.next(m.one_b_flag);
      stream.next(m.two_b_flag);
      stream.next(m.Deep_sum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetParameter_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::strategy::GetParameter_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::strategy::GetParameter_<ContainerAllocator>& v)
  {
    s << indent << "Dy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Dy);
    s << indent << "Dx: ";
    Printer<float>::stream(s, indent + "  ", v.Dx);
    s << indent << "RD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RD);
    s << indent << "LD: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LD);
    s << indent << "WR: ";
    Printer<int32_t>::stream(s, indent + "  ", v.WR);
    s << indent << "WL: ";
    Printer<int32_t>::stream(s, indent + "  ", v.WL);
    s << indent << "slope_avg: ";
    Printer<float>::stream(s, indent + "  ", v.slope_avg);
    s << indent << "LeftblueOBS_XMax: ";
    Printer<int32_t>::stream(s, indent + "  ", v.LeftblueOBS_XMax);
    s << indent << "RightblueOBS_XMin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.RightblueOBS_XMin);
    s << indent << "in_reddoor_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.in_reddoor_flag);
    s << indent << "L_XMAX: ";
    Printer<int32_t>::stream(s, indent + "  ", v.L_XMAX);
    s << indent << "R_XMIN: ";
    Printer<int32_t>::stream(s, indent + "  ", v.R_XMIN);
    s << indent << "b_obs_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b_obs_flag);
    s << indent << "y_obs_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.y_obs_flag);
    s << indent << "l_center_Dy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.l_center_Dy);
    s << indent << "r_center_Dy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.r_center_Dy);
    s << indent << "center_Dy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.center_Dy);
    s << indent << "one_b_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.one_b_flag);
    s << indent << "two_b_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.two_b_flag);
    s << indent << "Deep_sum: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Deep_sum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STRATEGY_MESSAGE_GETPARAMETER_H
