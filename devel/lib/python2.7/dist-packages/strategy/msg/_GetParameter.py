# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from strategy/GetParameter.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetParameter(genpy.Message):
  _md5sum = "9759c82a913d9fb9e363417e06932b7a"
  _type = "strategy/GetParameter"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 Dy
float32 Dx
int32 RD
int32 LD
int32 WR
int32 WL
float32 slope_avg
int32 LeftblueOBS_XMax
int32 RightblueOBS_XMin
bool in_reddoor_flag
int32 L_XMAX
int32 R_XMIN
bool b_obs_flag
bool y_obs_flag
int32 l_center_Dy
int32 r_center_Dy
int32 center_Dy
bool one_b_flag
bool two_b_flag
int32 Deep_sum
"""
  __slots__ = ['Dy','Dx','RD','LD','WR','WL','slope_avg','LeftblueOBS_XMax','RightblueOBS_XMin','in_reddoor_flag','L_XMAX','R_XMIN','b_obs_flag','y_obs_flag','l_center_Dy','r_center_Dy','center_Dy','one_b_flag','two_b_flag','Deep_sum']
  _slot_types = ['int32','float32','int32','int32','int32','int32','float32','int32','int32','bool','int32','int32','bool','bool','int32','int32','int32','bool','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Dy,Dx,RD,LD,WR,WL,slope_avg,LeftblueOBS_XMax,RightblueOBS_XMin,in_reddoor_flag,L_XMAX,R_XMIN,b_obs_flag,y_obs_flag,l_center_Dy,r_center_Dy,center_Dy,one_b_flag,two_b_flag,Deep_sum

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetParameter, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Dy is None:
        self.Dy = 0
      if self.Dx is None:
        self.Dx = 0.
      if self.RD is None:
        self.RD = 0
      if self.LD is None:
        self.LD = 0
      if self.WR is None:
        self.WR = 0
      if self.WL is None:
        self.WL = 0
      if self.slope_avg is None:
        self.slope_avg = 0.
      if self.LeftblueOBS_XMax is None:
        self.LeftblueOBS_XMax = 0
      if self.RightblueOBS_XMin is None:
        self.RightblueOBS_XMin = 0
      if self.in_reddoor_flag is None:
        self.in_reddoor_flag = False
      if self.L_XMAX is None:
        self.L_XMAX = 0
      if self.R_XMIN is None:
        self.R_XMIN = 0
      if self.b_obs_flag is None:
        self.b_obs_flag = False
      if self.y_obs_flag is None:
        self.y_obs_flag = False
      if self.l_center_Dy is None:
        self.l_center_Dy = 0
      if self.r_center_Dy is None:
        self.r_center_Dy = 0
      if self.center_Dy is None:
        self.center_Dy = 0
      if self.one_b_flag is None:
        self.one_b_flag = False
      if self.two_b_flag is None:
        self.two_b_flag = False
      if self.Deep_sum is None:
        self.Deep_sum = 0
    else:
      self.Dy = 0
      self.Dx = 0.
      self.RD = 0
      self.LD = 0
      self.WR = 0
      self.WL = 0
      self.slope_avg = 0.
      self.LeftblueOBS_XMax = 0
      self.RightblueOBS_XMin = 0
      self.in_reddoor_flag = False
      self.L_XMAX = 0
      self.R_XMIN = 0
      self.b_obs_flag = False
      self.y_obs_flag = False
      self.l_center_Dy = 0
      self.r_center_Dy = 0
      self.center_Dy = 0
      self.one_b_flag = False
      self.two_b_flag = False
      self.Deep_sum = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_if4if2iB2i2B3i2Bi().pack(_x.Dy, _x.Dx, _x.RD, _x.LD, _x.WR, _x.WL, _x.slope_avg, _x.LeftblueOBS_XMax, _x.RightblueOBS_XMin, _x.in_reddoor_flag, _x.L_XMAX, _x.R_XMIN, _x.b_obs_flag, _x.y_obs_flag, _x.l_center_Dy, _x.r_center_Dy, _x.center_Dy, _x.one_b_flag, _x.two_b_flag, _x.Deep_sum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.Dy, _x.Dx, _x.RD, _x.LD, _x.WR, _x.WL, _x.slope_avg, _x.LeftblueOBS_XMax, _x.RightblueOBS_XMin, _x.in_reddoor_flag, _x.L_XMAX, _x.R_XMIN, _x.b_obs_flag, _x.y_obs_flag, _x.l_center_Dy, _x.r_center_Dy, _x.center_Dy, _x.one_b_flag, _x.two_b_flag, _x.Deep_sum,) = _get_struct_if4if2iB2i2B3i2Bi().unpack(str[start:end])
      self.in_reddoor_flag = bool(self.in_reddoor_flag)
      self.b_obs_flag = bool(self.b_obs_flag)
      self.y_obs_flag = bool(self.y_obs_flag)
      self.one_b_flag = bool(self.one_b_flag)
      self.two_b_flag = bool(self.two_b_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_if4if2iB2i2B3i2Bi().pack(_x.Dy, _x.Dx, _x.RD, _x.LD, _x.WR, _x.WL, _x.slope_avg, _x.LeftblueOBS_XMax, _x.RightblueOBS_XMin, _x.in_reddoor_flag, _x.L_XMAX, _x.R_XMIN, _x.b_obs_flag, _x.y_obs_flag, _x.l_center_Dy, _x.r_center_Dy, _x.center_Dy, _x.one_b_flag, _x.two_b_flag, _x.Deep_sum))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 65
      (_x.Dy, _x.Dx, _x.RD, _x.LD, _x.WR, _x.WL, _x.slope_avg, _x.LeftblueOBS_XMax, _x.RightblueOBS_XMin, _x.in_reddoor_flag, _x.L_XMAX, _x.R_XMIN, _x.b_obs_flag, _x.y_obs_flag, _x.l_center_Dy, _x.r_center_Dy, _x.center_Dy, _x.one_b_flag, _x.two_b_flag, _x.Deep_sum,) = _get_struct_if4if2iB2i2B3i2Bi().unpack(str[start:end])
      self.in_reddoor_flag = bool(self.in_reddoor_flag)
      self.b_obs_flag = bool(self.b_obs_flag)
      self.y_obs_flag = bool(self.y_obs_flag)
      self.one_b_flag = bool(self.one_b_flag)
      self.two_b_flag = bool(self.two_b_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_if4if2iB2i2B3i2Bi = None
def _get_struct_if4if2iB2i2B3i2Bi():
    global _struct_if4if2iB2i2B3i2Bi
    if _struct_if4if2iB2i2B3i2Bi is None:
        _struct_if4if2iB2i2B3i2Bi = struct.Struct("<if4if2iB2i2B3i2Bi")
    return _struct_if4if2iB2i2B3i2Bi
